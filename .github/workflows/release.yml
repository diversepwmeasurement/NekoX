jobs:
  boringssl:
    name: Native Build (BoringSSL)
    needs: check
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Fetch Status
      run: git submodule status TMessagesProj/jni/boringssl > boringssl_status
    - continue-on-error: true
      id: cache
      name: BoringSSL Cache
      uses: actions/cache@v2
      with:
        key: ${{ hashFiles('boringssl_status') }}
        path: 'TMessagesProj/jni/boringssl/build

          '
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Setup Android SDK Tools
      uses: android-actions/setup-android@v2
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Install NDK
      run: 'echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;21.4.7075529"
        --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null

        echo "sdk.dir=${ANDROID_HOME}" > local.properties

        echo "ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529" >> local.properties

        '
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Native Build
      run: './run init action boringssl

        ./run init libs boringssl

        '
  build:
    name: Gradle Build
    needs:
    - native
    - v2ray
    - shadowsocks
    - shadowsocksr
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Setup Android SDK Tools
      uses: android-actions/setup-android@v2
    - continue-on-error: true
      name: Install NDK
      run: 'echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;21.4.7075529"
        --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null

        echo "sdk.dir=${ANDROID_HOME}" > local.properties

        echo "ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529" >> local.properties

        '
    - continue-on-error: true
      name: Fetch Status
      run: 'git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status

        git submodule status TMessagesProj/jni/boringssl > boringssl_status

        git submodule status ss-rust/src/main/rust/shadowsocks-rust > shadowsocks_status

        git submodule status ''ssr-libev/*'' > shadowsocksr_status

        git submodule status v2ray > v2ray_status

        '
    - continue-on-error: true
      name: Native Cache (armeabi-v7a)
      uses: actions/cache@v2
      with:
        key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status')
          }}-armeabi-v7a
        path: 'TMessagesProj/src/main/libs

          '
    - continue-on-error: true
      name: Native Cache (arm64-v8a)
      uses: actions/cache@v2
      with:
        key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status')
          }}-arm64-v8a
        path: 'TMessagesProj/src/main/libs

          '
    - continue-on-error: true
      name: Native Cache (x86)
      uses: actions/cache@v2
      with:
        key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status')
          }}-x86
        path: 'TMessagesProj/src/main/libs

          '
    - continue-on-error: true
      name: Native Cache (x86_64)
      uses: actions/cache@v2
      with:
        key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status')
          }}-x86_64
        path: 'TMessagesProj/src/main/libs

          '
    - continue-on-error: true
      name: V2ray Cache
      uses: actions/cache@v2
      with:
        key: ${{ hashFiles('bin/libs/v2ray/*', 'v2ray_status') }}
        path: 'TMessagesProj/libs/libv2ray.aar

          '
    - continue-on-error: true
      name: Shadowsocks Cache
      uses: actions/cache@v2
      with:
        key: ${{ hashFiles('shadowsocks_status') }}
        path: 'TMessagesProj/libs/ss-rust-release.aar

          '
    - continue-on-error: true
      name: ShadowsocksR Cache
      uses: actions/cache@v2
      with:
        key: ${{ hashFiles('shadowsocksr_status') }}
        path: 'TMessagesProj/libs/ssr-libev-release.aar

          '
    - continue-on-error: true
      name: Fix Gradle Memoery
      run: 'sed -i -e "s/16384/6144/g" gradle.properties

        '
    - continue-on-error: true
      name: Gradle cache
      uses: actions/cache@v2
      with:
        key: gradle-${{ hashFiles('**/*.gradle') }}
        path: ~/.gradle
    - continue-on-error: true
      name: Release Build
      run: 'export LOCAL_PROPERTIES="${{ secrets.LOCAL_PROPERTIES }}"

        ./gradlew TMessagesProj:assemble${{ matrix.flavor }}


        APK=$(find TMessagesProj/build/outputs/apk -name ''*arm64-v8a*.apk'')

        APK=$(dirname $APK)

        echo "APK=$APK" >> $GITHUB_ENV

        '
    - continue-on-error: true
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.flavor }}
        path: ${{ env.APK }}
    strategy:
      matrix:
        flavor:
        - FullRelease
        - FullReleaseNoGcm
        - MiniRelease
        - MiniReleaseNoGcm
  check:
    name: Check Access
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      name: Check access
      uses: lannonbr/repo-permission-check-action@2.0.0
      with:
        permission: write
  ffmpeg:
    name: Native Build (FFmpeg)
    needs: check
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Fetch Status
      run: 'git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status

        git submodule status TMessagesProj/jni/libvpx > libvpx_status

        '
    - continue-on-error: true
      id: cache
      name: FFmpeg Cache
      uses: actions/cache@v2
      with:
        key: ${{ hashFiles('ffmpeg_status', 'libvpx_status', 'TMessagesProj/jni/*ffmpeg*.sh',
          'TMessagesProj/jni/*libvpx*.sh', 'TMessagesProj/jni/patches/ffmpeg/*') }}
        path: 'TMessagesProj/jni/ffmpeg/build

          TMessagesProj/jni/libvpx/build

          '
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Setup Android SDK Tools
      uses: android-actions/setup-android@v2
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Install NDK
      run: 'echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;21.4.7075529"
        --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null

        echo "sdk.dir=${ANDROID_HOME}" > local.properties

        echo "ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529" >> local.properties

        '
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Native Build
      run: 'sudo apt-get install yasm -y

        ./run init libs libvpx

        ./run init libs ffmpeg

        '
  native:
    name: Native Build (Telegram)
    needs:
    - ffmpeg
    - boringssl
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Fetch Status
      run: 'git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status

        git submodule status TMessagesProj/jni/libvpx > libvpx_status

        git submodule status TMessagesProj/jni/boringssl > boringssl_status

        '
    - continue-on-error: true
      id: cache
      name: Native Cache
      uses: actions/cache@v2
      with:
        key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status')
          }}-${{ matrix.flavor }}
        path: 'TMessagesProj/src/main/libs

          '
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Checkout Library
      run: 'git submodule update --init ''TMessagesProj/jni/*''

        '
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: FFmpeg Cache
      uses: actions/cache@v2
      with:
        key: ${{ hashFiles('ffmpeg_status', 'libvpx_status', 'TMessagesProj/jni/*ffmpeg*.sh',
          'TMessagesProj/jni/*libvpx*.sh', 'TMessagesProj/jni/patches/ffmpeg/*') }}
        path: 'TMessagesProj/jni/ffmpeg/build

          TMessagesProj/jni/libvpx/build

          '
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: BoringSSL Cache
      uses: actions/cache@v2
      with:
        key: ${{ hashFiles('boringssl_status') }}
        path: 'TMessagesProj/jni/boringssl/build

          '
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Setup Android SDK Tools
      uses: android-actions/setup-android@v2
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Install NDK
      run: 'echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;21.4.7075529"
        --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null

        echo "sdk.dir=${ANDROID_HOME}" > local.properties

        echo "ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529" >> local.properties

        '
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Fix BoringSSL
      run: 'cd TMessagesProj/jni

        ./patch_boringssl.sh

        '
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Native Build
      run: 'export NATIVE_TARGET="${{ matrix.flavor }}"

        ./run libs native

        '
    strategy:
      matrix:
        flavor:
        - armeabi-v7a
        - arm64-v8a
        - x86
        - x86_64
  publish:
    if: github.event.inputs.publish != 'y'
    name: Publish Release
    needs: build
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Donwload Artifacts
      uses: actions/download-artifact@v2
      with:
        path: artifacts
    - continue-on-error: true
      name: Release
      run: 'wget -O ghr.tar.gz https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz

        tar -xvf ghr.tar.gz

        mv ghr*linux_amd64/ghr .

        mkdir apks

        find artifacts -name "*.apk" -exec cp {} apks \;

        ./ghr -delete -t "${{ github.token }}" -n "${{ github.event.inputs.tag }}"
        "${{ github.event.inputs.tag }}" apks

        '
  shadowsocks:
    name: Native Build (Shadowsocks)
    needs: check
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Fetch Status
      run: git submodule status ss-rust/src/main/rust/shadowsocks-rust > shadowsocks_status
    - continue-on-error: true
      id: cache
      name: Shadowsocks Cache
      uses: actions/cache@v2
      with:
        key: ${{ hashFiles('shadowsocks_status') }}
        path: 'TMessagesProj/libs/ss-rust-release.aar

          '
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Setup Android SDK Tools
      uses: android-actions/setup-android@v2
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Install NDK
      run: 'echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;21.4.7075529"
        --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null

        echo "sdk.dir=${ANDROID_HOME}" > local.properties

        echo "ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529" >> local.properties

        '
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Install Rust
      run: ./run init action shadowsocks
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Native Build
      run: ./run libs shadowsocks
  shadowsocksr:
    name: Native Build (ShadowsocksR)
    needs: check
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Fetch Status
      run: git submodule status 'ssr-libev/*' > shadowsocksr_status
    - continue-on-error: true
      id: cache
      name: ShadowsocksR Cache
      uses: actions/cache@v2
      with:
        key: ${{ hashFiles('shadowsocksr_status') }}
        path: 'TMessagesProj/libs/ssr-libev-release.aar

          '
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Setup Android SDK Tools
      uses: android-actions/setup-android@v2
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Install NDK
      run: 'echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;21.4.7075529"
        --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null

        echo "sdk.dir=${ANDROID_HOME}" > local.properties

        echo "ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529" >> local.properties

        '
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Native Build
      run: ./run libs ssr
  telegram-bot-api:
    name: Telegram Bot API
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Clone Telegram Bot API
      run: 'git clone --recursive https://github.com/tdlib/telegram-bot-api.git

        git status telegram-bot-api >> telegram-bot-api-status

        '
    - continue-on-error: true
      id: cache-bot-api
      name: Cache Bot API Binary
      uses: actions/cache@v2
      with:
        key: CI-telegram-bot-api-${{ hashFiles('telegram-bot-api-status') }}
        path: telegram-bot-api-binary
    - continue-on-error: true
      if: steps.cache-bot-api.outputs.cache-hit != 'true'
      name: Compile Telegram Bot API
      run: 'sudo apt-get update

        sudo apt-get install make git zlib1g-dev libssl-dev gperf cmake g++

        cd telegram-bot-api

        rm -rf build

        mkdir build

        cd build

        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=.. ..

        cmake --build . --target install -j$(nproc)

        cd ../..

        ls -l telegram-bot-api/bin/telegram-bot-api*

        cp telegram-bot-api/bin/telegram-bot-api telegram-bot-api-binary

        '
    - continue-on-error: true
      name: Upload Binary
      uses: actions/upload-artifact@master
      with:
        name: telegram-bot-api-binary
        path: telegram-bot-api-binary
  upload:
    if: github.event.inputs.upload != 'y'
    name: Upload Release
    needs:
    - build
    - telegram-bot-api
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        path: artifacts
    - continue-on-error: true
      name: Download Telegram Bot API Binary
      uses: actions/download-artifact@master
      with:
        name: telegram-bot-api-binary
        path: .
    - continue-on-error: true
      name: Prepare Upload
      run: "chmod +x telegram-bot-api-binary\nfunction start() {\n  ./telegram-bot-api-binary\
        \ -p 38118 --api-id=21724 --api-hash=3e0cb5efcd52300aec5994fdfc5bdc16 --local\
        \ 2>&1 > /dev/null &\n  sleep 5\n}\nstart\ncurl http://127.0.0.1:38118/ ||\
        \ start\ncurl http://127.0.0.1:38118/ || start\ncurl http://127.0.0.1:38118/\
        \ || start\n"
    - continue-on-error: true
      name: Upload
      run: 'mkdir apks

        find artifacts -name "*.apk" -exec cp {} apks \;

        curl https://raw.githubusercontent.com/NekoX-Dev/NekoX/dev/.github/scripts/upload.py
        -o upload.py

        export BOT_TOKEN="${{ secrets.HELPER_BOT_TOKEN }}"

        export BOT_TARGET="${{ secrets.HELPER_BOT_TARGET }}"

        export VERSION_CODE="$(grep -E "def verCode = ([0-9]+)" TMessagesProj/build.gradle
        | sed "s/def verCode = //")"

        export VERSION_NAME="$(grep -E "def verName = " TMessagesProj/build.gradle
        | sed "s/def verName = //" | sed "s/\"//g")"

        python3 upload.py release

        pkill telegram-bot

        '
    - continue-on-error: true
      name: Setup upterm session
      uses: lhotari/action-upterm@v1
      with:
        limit-access-to-users: luvletter2333
  v2ray:
    name: Native Build (V2ray)
    needs: check
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v2
    - continue-on-error: true
      name: Fetch Status
      run: git submodule status v2ray > v2ray_status
    - continue-on-error: true
      id: cache
      name: V2ray Cache
      uses: actions/cache@v2
      with:
        key: ${{ hashFiles('bin/libs/v2ray/*', 'v2ray_status') }}
        path: 'TMessagesProj/libs/libv2ray.aar

          '
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Setup Android SDK Tools
      uses: android-actions/setup-android@v2
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Install NDK
      run: 'echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;21.4.7075529"
        --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null

        echo "sdk.dir=${ANDROID_HOME}" > local.properties

        echo "ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529" >> local.properties

        '
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Install Golang
      uses: actions/setup-go@v2
      with:
        go-version: 1.16
    - continue-on-error: true
      if: steps.cache.outputs.cache-hit != 'true'
      name: Native Build
      run: ./run libs v2ray
name: Release Build
on:
  repository_dispatch:
    types: trigger-ga___release.yml
